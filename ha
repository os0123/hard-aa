PRACTICAL 1
CREATE TABLE PROJECT(PNO NUMBER(8) PRIMARY KEY, PNAME VARCHAR(20), THRS NUMBER(8)); 
 
CREATE TABLE EMP01(ENO NUMBER(8) PRIMARY KEY, ENAME VARCHAR(20),HRS NUMBER(8),PNO NUMBER(8) REFERENCES PROJECT(PNO)); 
 
INSERT INTO PROJECT VALUES(11, 'LOCOMOTIVE', 0); 
INSERT INTO PROJECT VALUES(22, 'MONO RAIL', 0); 
INSERT INTO PROJECT VALUES(33, 'METRO TRAIN', 0); 
//INSERT TRIGGER 
 
CREATE OR REPLACE TRIGGER THRS5 
AFTER INSERT ON EMP01 
FOR EACH ROW 
WHEN(NEW.PNO IS NOT NULL) 
BEGIN 
 
UPDATE PROJECT SET THRS = THRS + :NEW.HRS WHERE PNO = :NEW.PNO; 
END; 
/ 
 
INSERT INTO EMP01 VALUES(1, 'GOJO', 50, 11); 
INSERT INTO EMP01 VALUES(2, 'LEVI', 14, 11); 
INSERT INTO EMP01 VALUES(3, 'MIKASA', 66, 11); 
INSERT INTO EMP01 VALUES(4, 'ARMIN', 18, 22); INSERT INTO EMP01 VALUES(5, 'JEAN', 26, 22); 
INSERT INTO EMP01 VALUES(6, 'NANMI', 11, 33); 
//UPDATE TRIGGER 
CREATE TRIGGER THRS6 
AFTER UPDATE OF ENO ON EMP01 
FOR EACH ROW 
WHEN(NEW.PNO IS NOT NULL) 
BEGIN 
UPDATE PROJECT SET THRS = THRS + :NEW.HRS WHERE PNO = :NEW.PNO; 
END; 
/ 
 
UPDATE EMP01 SET HRS = 19 WHERE ENO = 2; 
 
//UPDATE TRIGGER 
CREATE TRIGGER THRS7 
AFTER UPDATE OF HRS ON EMP01 
FOR EACH ROW 
WHEN(NEW.PNO IS NOT NULL) 
BEGIN 
 
UPDATE PROJECT SET THRS = THRS + :NEW.HRS WHERE PNO = :NEW.PNO; 
END; 
/ 
 
//DELETE TRIGGER 
CREATE TRIGGER THRS8 
AFTER DELETE ON EMP01 
FOR EACH ROW 
WHEN(OLD.PNO IS NOT NULL) 
BEGIN 
UPDATE PROJECT SET THRS = THRS - :OLD.HRS WHERE PNO = :OLD.PNO; 
END; 
/ 
 
DELETE FROM EMP01 WHERE ENO = 1; 
  
  
  PRACTICAL 2
  
  
  CREATE SEQUENCE SUPPID 
MINVALUE 1 
MAXVALUE 99999 
 
START WITH 10 
 
INCREMENT BY 5 
 
CACHE 20; 
 
 
 
CREATE TABLE SUPPLIER (SUPPID NUMBER(5),SUPPNAME VARCHAR2(15)); 
 
 
 
DECLARE 
 
V_COUNTER NUMBER(5):=0; 
V_SUPPID SUPPLIER.SUPPID%TYPE; 
V_SUPPNAME SUPPLIER.SUPPNAME%TYPE:='ROHIT'; 
BEGIN 
LOOP 
 
INSERT INTO SUPPLIER (SUPPNAME,SUPPID) VALUES (V_SUPPNAME,SUPPID.NEXTVAL); 
V_COUNTER:=V_COUNTER+1; 
DBMS_OUTPUT.PUT_LINE(TO_CHAR(V_COUNTER)||' RECORDS ADDED'); 
EXIT WHEN V_COUNTER=100; 
END LOOP; 
END; 
/ 

PRACTICAL 3

CREATE TABLE EMP02(ENO NUMBER(5), ENAME VARCHAR(15)); 
CREATE SEQUENCE S01 
START WITH 10 
CYCLE 
MINVALUE 10 
MAXVALUE 50 
 
INCREMENT BY 10 
 
CACHE 2; 
 
 
 
BEGIN 
 
FOR i IN 1..10 LOOP 
 
INSERT INTO EMP02 VALUES(S01.NEXTVAL, 'DBMS'); 
END LOOP; 
END; 
 
/ 
SELECT * FROM EMP02; 


PRACTICAL4

CREATE TABLE EMP03(ENO NUMBER(3) PRIMARY KEY, ENAME VARCHAR(25),SALARY NUMBER(6),JOIN_DATE DATE); 
 
SELECT * FROM EMP03; 
 
 
 
INSERT INTO EMP03 VALUES(1,'BAJI',450000,TO_DATE('10062003','DDMMYYYY')); 
INSERT INTO EMP03 VALUES(2,'MIKEY',260000,TO_DATE('21021997','DDMMYYYY')); 
INSERT INTO EMP03 VALUES(3,'HANMA',800000,TO_DATE('05062002','DDMMYYYY')); 
INSERT INTO EMP03 VALUES(4,'HINA',770000,TO_DATE('14112005','DDMMYYYY')); 
 
 
DECLARE 
 
CURSOR EMP_CURSOR IS SELECT ENO, SALARY, JOIN_DATE FROM EMP03; 
V_ENO EMP03.ENO%TYPE; 
V_SALARY EMP03.SALARY%TYPE; 
V_JOIN_DATE EMP03.JOIN_DATE%TYPE; 
BEGIN 
OPEN EMP_CURSOR; 
 
LOOP 
 
FETCH EMP_CURSOR INTO V_ENO, V_SALARY, V_JOIN_DATE; 
IF EMP_CURSOR%NOTFOUND THEN 
EXIT; 
 
ELSIF V_JOIN_DATE = TO_DATE('20001212','YYYYMMDD') THEN 
 
UPDATE EMP03 SET SALARY = SALARY + V_SALARY*0.15 WHERE ENO = V_ENO; 
ELSE 
UPDATE EMP03 SET SALARY = SALARY + V_SALARY*0.05 WHERE ENO = V_ENO; 
END IF; 
END 
LOOP; 
 
CLOSE EMP_CURSOR; 
 
END; 
 
/ 


PRACTICAL5

CREATE TABLE LECTURER (LID NUMBER(4),LNAME VARCHAR2(14),MAJORSUBJECT 
VARCHAR2(10),COURSENAME VARCHAR2(15)); 
 
 
INSERT INTO LECTURER VALUES(1,'VINAY','CS','COMPUTERSCIENCE'); INSERT INTO LECTURER VALUES(2,'SONAL','IT','INFOTECH'); 
INSERT INTO LECTURER VALUES(3,'SABEE','CS','COMPUTERSCIENCE'); 
INSERT INTO LECTURER VALUES(4,'JAY','BT','BIOTECHNOLOGY'); 
 
 
DECLARE 
 
V_LID LECTURER.LID%TYPE := &V_LID; 
V_LNAME LECTURER.LNAME%TYPE; 
V_MAJORSUBJECT LECTURER.MAJORSUBJECT%TYPE; 
V_COURSENAME LECTURER.COURSENAME%TYPE; 
BEGIN 
SELECT LNAME, MAJORSUBJECT,COURSENAME INTO V_LNAME, V_MAJORSUBJECT, 
V_COURSENAME FROM LECTURER WHERE LID = V_LID; 
CASE V_MAJORSUBJECT 
 
WHEN 'CS' THEN DBMS_OUTPUT.PUT_LINE(V_LNAME || ' : ' || 
 
 
 
V_COURSENAME); 
 
WHEN 'IT' THEN DBMS_OUTPUT.PUT_LINE(V_LNAME || ' : ' || 
V_COURSENAME); 
WHEN 'BT' THEN DBMS_OUTPUT.PUT_LINE(V_LNAME || ' : ' || 
V_COURSENAME); 
END CASE; 
END; 
/ 


PRACTICAL6


CREATE TABLE DEPARTMENT(DEPTNO NUMBER(4) PRIMARY KEY , DNAME VARCHAR2(25)); 
 
 
 
INSERT INTO DEPARTMENT VALUES(11, 'ACCOUNTS'); 
INSERT INTO DEPARTMENT VALUES(22, 'FINANCE'); 
INSERT INTO DEPARTMENT VALUES(33, 'ADVERTISEMENT'); 
 
 
 
CREATE TABLE EMPLOYEE (EMPNO NUMBER(4) PRIMARY KEY,ENAME VARCHAR2(10), SALARY NUMBER(10), DEPTNO NUMBER(4) REFERENCES DEPARTMENT(DEPTNO)); 
 
 
INSERT INTO EMPLOYEE VALUES(1,'VARUN',11000, 22); 
INSERT INTO EMPLOYEE VALUES(2,'ROHINI',76000, 11); 
INSERT INTO EMPLOYEE VALUES(3,'SONIYA',58000, 22); 
INSERT INTO EMPLOYEE VALUES(4,'RAMU',53000, 33); 
 
DECLARE 
 
CURSOR DEPARTMENT_CURSOR IS SELECT DEPTNO, DNAME FROM DEPARTMENT; 
V_DEPTNO DEPARTMENT.DEPTNO%TYPE; 
V_DNAME DEPARTMENT.DNAME%TYPE; 
V_SALARY_SUM NUMBER(10); 
V_EMPLOYEE_COUNT NUMBER(3); 
BEGIN 
OPEN DEPARTMENT_CURSOR; 
 
FETCH DEPARTMENT_CURSOR INTO V_DEPTNO, V_DNAME; 
WHILE DEPARTMENT_CURSOR%FOUND 
LOOP 
 
SELECT COUNT(EMPNO), SUM(SALARY) INTO V_EMPLOYEE_COUNT, 
V_SALARY_SUM FROM EMPLOYEE WHERE DEPTNO = V_DEPTNO; 
DBMS_OUTPUT.PUT_LINE(V_DEPTNO || ' ' || V_DNAME || ' ' || ' TOTAL SALARY: ' || V_SALARY_SUM || 
 
' EMPLOYEE COUNT: ' || V_EMPLOYEE_COUNT ); 
 
FETCH DEPARTMENT_CURSOR INTO V_DEPTNO, V_DNAME; 
END LOOP; 
CLOSE DEPARTMENT_CURSOR; 
END; 
/ 


PRACTICAL7
DECLARE 
 
CURSOR EMPLOYEE_CURSOR IS SELECT * FROM EMP; 
V_EMPLOYEE_ROW EMP%ROWTYPE; 
V_DNAME DEPT.DNAME%TYPE; 
BEGIN 
FOR V_EMPLOYEE_ROW IN EMPLOYEE_CURSOR LOOP 
 
IF V_EMPLOYEE_ROW.EMPNO = 7369 OR V_EMPLOYEE_ROW.EMPNO = 7499 
THEN 
GOTO SKIP; 
END IF; 
SELECT DNAME INTO V_DNAME FROM DEPT WHERE DEPTNO =V_EMPLOYEE_ROW.DEPTNO; 
DBMS_OUTPUT.PUT_LINE(V_EMPLOYEE_ROW.EMPNO || ' ' ||V_EMPLOYEE_ROW.ENAME || ' ' || 
V_DNAME); 
<<SKIP>> 
NULL; 
END LOOP; 
END; 
 
/ 


PRACTICAL8

CREATE OR REPLACE PROCEDURE INCREASE_SALARY (P_EMPNO EMP.EMPNO%TYPE) IS 
V_SALARY EMP.SAL%TYPE; 
V_ENAME EMP.ENAME%TYPE; 
BEGIN 
SELECT ENAME, SAL INTO V_ENAME, V_SALARY FROM EMP WHERE EMPNO = 
P_EMPNO; 
UPDATE EMP SET SAL = V_SALARY*1.15 WHERE EMPNO = P_EMPNO; DBMS_OUTPUT.PUT_LINE('INCREMENTED SALARY FOR ' || V_ENAME || ' FROM ' || 
V_SALARY || ' TO ' || V_SALARY*1.15); 
EXCEPTION 
WHEN NO_DATA_FOUND THEN 
DBMS_OUTPUT.PUT_LINE('RECORD NOT FOUND'); 
END; 
/  
DECLARE 
V_EMPNO EMP.EMPNO%TYPE := &V_EMPNO; 
BEGIN 
INCREASE_SALARY(V_EMPNO); 
END; 
/  
CREATE OR REPLACE PROCEDURE DISPLAY_EMPLOYEE (P_EMPNO EMP.EMPNO%TYPE) 
IS 
V_ENAME EMP.ENAME%TYPE; 
V_SALARY EMP.SAL%TYPE; 
V_DEPTNO EMP.DEPTNO%TYPE; 
V_DNAME DEPT.DNAME%TYPE; 
BEGIN 
SELECT ENAME, SAL, DEPTNO INTO V_ENAME, V_SALARY, V_DEPTNO FROM EMP 
WHERE EMPNO = P_EMPNO; 
SELECT DNAME INTO V_DNAME FROM DEPT WHERE DEPTNO = V_DEPTNO; DBMS_OUTPUT.PUT_LINE(V_ENAME || ' ' || V_SALARY || ' ' || V_DNAME); 
EXCEPTION 
WHEN NO_DATA_FOUND THEN 
DBMS_OUTPUT.PUT_LINE('RECORD NOT FOUND'); 
END; 
/ 
DECLARE 
V_EMPNO EMP.EMPNO%TYPE := &V_EMPNO; 
BEGIN 
DISPLAY_EMPLOYEE(V_EMPNO); 
END; 
/ 
 
PRACTICAL9

CREATE OR REPLACE FUNCTION FUN01(P_DEPTNO DEPT.DEPTNO%TYPE) 
RETURN VARCHAR2 
IS 
V_EMPLOYEE_COUNT NUMBER(2); 
V_MAX_SALARY EMP.SAL%TYPE; 
BEGIN 
SELECT COUNT(EMPNO),MAX(SAL) INTO V_EMPLOYEE_COUNT, V_MAX_SALARY 
FROM EMP WHERE DEPTNO = P_DEPTNO; 
IF V_EMPLOYEE_COUNT = 0 THEN 
RETURN 'NO RECORDS'; 
ELSE 
RETURN 'EMPLOYEE COUNT: ' || V_EMPLOYEE_COUNT || 'MAX SALARY: ' || V_MAX_SALARY; 
END IF; 
END; 
/  
DECLARE 
V_DEPTNO DEPT.DEPTNO%TYPE := &V_DEPTNO; 
BEGIN 
DBMS_OUTPUT.PUT_LINE(FUN01(V_DEPTNO)); 
END; 
/  
CREATE OR REPLACE FUNCTION FUN02(COUNTER NUMBER) 
RETURN VARCHAR2 
IS 
V_ENAME EMP.ENAME%TYPE; 
V_SALARY EMP.SAL%TYPE; 
BEGIN 
IF COUNTER = 11 THEN RETURN 'COMPLETED'; 
END IF; 
SELECT ENAME, SAL INTO V_ENAME, V_SALARY FROM EMP WHERE EMPNO = COUNTER; 
DBMS_OUTPUT.PUT_LINE(V_ENAME || ' ' || V_SALARY); 
RETURN FUN02(COUNTER + 1); 
END; 
/ 
BEGIN 
DBMS_OUTPUT.PUT_LINE(FUN02(3)); 
END; 
/ 


PRACTICAL 10

DECLARE 
 
TOTAL_SAL NUMBER(9); 
BEGIN 
INSERT INTO EMP VALUES(7211,'LEVI','CLERK',7251,'14-FEB-97',4500,150,10); 
SAVEPOINT NO_UPDATE; 
UPDATE EMP SET SAL = SAL + 2000 WHERE ENAME = 'CLARK'; 
UPDATE EMP SET SAL = SAL + 1500 WHERE ENAME = 'BLAKE'; 
SELECT SUM(SAL) INTO TOTAL_SAL FROM EMP; 
IF TOTAL_SAL>20000 THEN 
 
ROLLBACK TO SAVEPOINT NO_UPDATE; 
END IF; 
COMMIT; 
END; 
/ 
â€“ 
SELECT * FROM EMP; 


